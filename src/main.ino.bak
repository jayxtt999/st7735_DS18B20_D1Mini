#include <OneWire.h>
#include "NotoSansBold15.h"
#include "NotoSansBold36.h"
#include "Unicode_Test_72.h"
int DS18S20_Pin = D2; // DS18S20 Signal pin on digital 2

// Temperature chip i/o
OneWire ds(DS18S20_Pin); // on digital pin 2

// The font names are arrays references, thus must NOT be in quotes ""
#define AA_FONT_SMALL NotoSansBold15
#define AA_FONT_LARGE NotoSansBold36
#define AA_FONT_BIG Unicode_Test_72

#include <SPI.h>
#include <TFT_eSPI.h> // Hardware-specific library

TFT_eSPI tft = TFT_eSPI();
// TFT_eSprite spr = TFT_eSprite(&tft); // Sprite class needs to be invoked

int16_t x = 1111;
float TemperatureSum = 0;
int xpos = 0;
int ypos = 0;

void setup(void)
{

    // start serial port
    Serial.begin(9600);
    tft.begin();
    tft.setRotation(1);
}

void loop()
{

    tft.fillScreen(TFT_BLACK);
    tft.loadFont(AA_FONT_LARGE);
    tft.setTextColor(TFT_GREEN, TFT_BLACK);
    xpos = tft.width() / 2;
    ypos = tft.height() / 2;
    tft.fillScreen(TFT_BLACK);
    tft.setTextDatum(MC_DATUM);
    tft.drawString((String)x, xpos, ypos);

    x++;
    // tft.drawString((String)(temperature), 30, 25);
    tft.unloadFont();
    delay(1000);
}

float getTemp()
{
    // returns the temperature from one DS18S20 in DEG Celsius

    byte data[12];
    byte addr[8];

    if (!ds.search(addr))
    {
        // no more sensors on chain, reset search
        ds.reset_search();
        return -1000;
    }

    if (OneWire::crc8(addr, 7) != addr[7])
    {
        Serial.println("CRC is not valid!");
        return -1000;
    }

    if (addr[0] != 0x10 && addr[0] != 0x28)
    {
        Serial.print("Device is not recognized");
        return -1000;
    }

    ds.reset();
    ds.select(addr);
    ds.write(0x44, 1); // start conversion, with parasite power on at the end

    byte present = ds.reset();
    ds.select(addr);
    ds.write(0xBE); // Read Scratchpad

    for (int i = 0; i < 9; i++)
    { // we need 9 bytes
        data[i] = ds.read();
    }

    ds.reset_search();

    byte MSB = data[1];
    byte LSB = data[0];

    float tempRead = ((MSB << 8) | LSB); // using two's compliment
    float TemperatureSum = tempRead / 16;

    return TemperatureSum;
}


